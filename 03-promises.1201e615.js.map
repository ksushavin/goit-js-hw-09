{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,kBAAmBJ,SAASC,cAAc,gBAsC5C,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAS,C,SACPN,E,MACAC,IAGFM,EAAQ,C,SACNP,E,MACAC,GACA,G,CAhDRT,EAAKM,kBAAkBU,iBAAiB,SAExC,SAAkCC,GAEDA,EAA3BC,iBACJ,MAAMd,EAAOe,OAAOnB,EAAKI,KAAKgB,OACxBf,EAASc,OAAOnB,EAAKK,OAAOe,OAC5BnB,EAAakB,OAAOnB,EAAKC,WAAWmB,OAMU,IAA/C,IAAIC,EAAI,EAAGA,EAAIhB,EAAQgB,GAAG,EAAG,CAChC,IAAIC,EAAWD,EAAG,EACdE,EAAQtB,EAAYoB,EAAIjB,EAC5BoB,QAAQC,IAAI,WAAYH,GACxBE,QAAQC,IAAI,QAASF,GAIOG,YAAjB,KACTnB,EAAce,EAAUC,GACrBI,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBX,EAAA8B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAGhEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBX,EAAA8B,OAAOG,QAAQ,sBAAoBvB,QAAiBC,MAAU,GAE9D,GACHc,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst Refs = {\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  createPromisesBtn: document.querySelector('form button')\n}\n\nRefs.createPromisesBtn.addEventListener(\"click\", onCreatePromisesBtnClick);\n\nfunction onCreatePromisesBtnClick(evt) {\n  // Витягуємо введені в інпути значення\n  evt.preventDefault();\n  const step = Number(Refs.step.value);\n  const amount = Number(Refs.amount.value);\n  const firstDelay = Number(Refs.firstDelay.value);\n  // console.log(step);\n  // console.log(amount);\n  // console.log(firstDelay);\n\n  // На кожній ітерації вираховуємо номер промісу і його затримку\n  for (let i = 0; i < amount; i+=1) {\n    let position = i +1;\n    let delay = firstDelay+(i * step);\n    console.log('position', position);\n    console.log('delay', delay);\n\n    // Викликаємо createPromise на кожній ітерації з відповідною затримкою та \n    // відразу передаємо результати в then і catch.\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n          // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n          // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n    }, delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  \n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve ({\n        position,\n        delay\n      })\n    } else {\n      reject ({\n        position,\n        delay\n      })\n    }\n  })\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$Refs","firstDelay","document","querySelector","step","amount","createPromisesBtn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","evt","preventDefault","Number","value","i","position1","delay1","console","log","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.1201e615.js.map"}